"""Создаём проект по автоматизации"""

# base - директория в которой хранится базовый класс base с помощью которого мы будем вызывать
# определённые методы. Например метод который будет делать скриншот или выдавать корректный url,
# скролить по странице и т.д.

# pages - в этой директории мы будем хранить классы которые будут отвечать за определенные страницы,
# например главная страница, авторизация, корзина, подтверждение и т.д. В этой директории
# будем хранить все локаторы этих страниц, действия и методы которые мы в последствии будем вызывать
# в наших тестах.

# screen - директория в которых будет храниться наши скриншоты которые будем делать
# в процессе выполнения тестов.

# tests - здесь мы будем хранить наши тесты

# utilities - здесь будем хранить различные утилиты, например файл 'conftest',
# который мы будем использовать во время запуска наших тестов с помощью pytest.

# Команда для запуска здесь тестов - 'python -m pytest -s -v'

"""Очистка консоли от лишних сообщений"""
# Если в терминале возникают странные ошибки то можно сделать следующее:
# Вам нужно добавить путь установки pip в системную переменную PATH .
# По умолчанию pip устанавливается в 'C:\Python34\Scripts\pip'
# (теперь pip поставляется в комплекте с новыми версиями python),
# поэтому необходимо добавить путь «C:\Python34\Scripts» в переменную PATH.
# Чтобы проверить, находится ли он уже в вашей переменной PATH, введите 'echo %PATH%'
# в командной строке CMD (открыть от имени администратора).
# Чтобы добавить путь к вашей установке pip в переменную PATH , вы можете использовать
# панель управления или setxкоманду. Например: setx PATH "%PATH%;C:\Python34\Scripts"
# Перезапустить командную строку от имени администратора.
# Открыть командную строку от имени администратора и ввести 'pip install pywin32'

# Переходим в наш тест test_1_buy_product и там пишем:
# options = Options()
# импортируем наш options: from selenium.webdriver.chrome.options import Options
# Дальше обращаемся к нашей переменной options которая является экземпляром класса Options()
# и вызываем метод options.add_experimental_option('excludeSwitches', ['enable-logging'])
# также передаем нашему драйверу атрибут chrome_options=options

# Добавляем метод получения текущей url в базовый класc

# Создаем метод assert word в базовом классе для проверки текста на странице

# Создадим файл cart_page для страницы с корзиной

# Создаём методы для проверки URL и создания скриншотов

# Создаём второй тест test_2_about_link

# Далее создаём в одном файле несколько тестовых методов
# Чтобы определить очередность запуска методов в одном тестовом файле нужно использовать
# @pytest.mark.run(order=3), где order=3 это номер очереди
# также необходимо установить пакет ordering - pip3 install pytest-ordering

# Чтобы запустить отдельный тест из файла необходимо перейти в терминале в папку с тестами
# ввести команду - 'python -m pytest -s -v -k test_buy_product_3'

# Создаём файл conftest в главной директории проекта
# На практике используют два подхода: первый когда в начале каждого теста инициализируется браузер
# Первый подход обобщенный и не даёт подойти к тесту индивидуально
# Второй подход рассмотрим в test_3_confest

# Запускаем тесты с параметром scope, это мы будем делать в файле conftest
# Аннотацию scope достаточно написать в одном методе в файле если методы запускаются по порядку
# если используется параметр order то нужно учитывать что тест начнётся с него и если там будет
# scope то он применится ко всему модулю, а если только в последнем методе то в последнем и проявиться
# Можем в параметрах метода указать сразу две аннотации из файла conftest

# Для записи логов необходимо создать директорию 'logs' в корне проекта
# В utilities мы создали файл 'logger' с кодом из обучения
# В этом файле есть класс 'Logger' который будет отвечать за создание наших логов
# Помещаем в наши методы методы из класса Logger, например в метод authorization

# Подключение Allure. Документация - https://docs.qameta.io/allure/
# Команда для установки Allure - 'pip install allure-pytest'
# Нужно открыть windows powershell (не от имени администратора) и написать команду - 'irm get.scoop.sh | iex'
# Так мы установим установщик командной строки для windows.
# Затем в powershell вводим команду для установки Allure - 'scoop install allure'
# Далее зайти в командную строку и проверить, что Allure установился командой - 'allure --version'
# Если будет возникать ошибка 'JAVA_HOME' - значит нужно установить сам язык Java и Java JDK
# затем в настройках Enviroment Variables установить системную переменную среды JAVA_HOME
# и прописать для отой переменной путь до места вашего JavaJDK

# Далее в файле с тестами пишем новый декоратор - @allure.description("Test buy product 1")
# Также пишем в файле - import allure
# На всех наших страницах в директориях импортируем allure - import allure
# Прописываем в методы шаг allure - with allure.step("Authorization"):
# Далее в терминале возвращаемся в корень проекта и пишем - 'python -m pytest --alluredir=test_results/ tests/test_checking_google_maps.py'

# Такми образом мы говорим allure куда сохранять наши отчёты и какой тестовый файл запустить

# Далее вновь открываем командную строку у переходим в каталог нашего проекта командой -
# cd D:\Projects\pythonMainProject
# Если вы в командной строке на другом диске находитесь, то введите - 'D:'
# Далее пишем команду - 'allure serve test_results' - это там где хранятся наши отчёты
# Система начнёт генерировать отчёт и сама откроет браузер
# Чтобы закончить тест нужны в командной строке нажать 'Ctrl + C' и кнопку Y
# Шпаргалка про Allure






